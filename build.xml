<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. -->
<project basedir="." default="build" name="rain">
    <property environment="env"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>
    <path id="rain.classpath">
    	<pathelement location="."/>
    	<pathelement location="bin"/>
        <pathelement location="thirdparty/httpcomponents-client-4.3.1/lib/commons-codec-1.6.jar"/>
        <pathelement location="thirdparty/httpcomponents-client-4.3.1/lib/commons-logging-1.1.3.jar"/>
        <pathelement location="thirdparty/httpcomponents-client-4.3.1/lib/fluent-hc-4.3.1.jar"/>
        <pathelement location="thirdparty/httpcomponents-client-4.3.1/lib/httpclient-4.3.1.jar"/>
        <pathelement location="thirdparty/httpcomponents-client-4.3.1/lib/httpclient-cache-4.3.1.jar"/>
        <pathelement location="thirdparty/httpcomponents-client-4.3.1/lib/httpcore-4.3.jar"/>
        <pathelement location="thirdparty/httpcomponents-client-4.3.1/lib/httpmime-4.3.1.jar"/>
        <pathelement location="thirdparty/json-20090211.jar"/>
    	<pathelement location="thirdparty/colt-1.2.0/colt.jar"/>
    	<!-- zookeeper stuff -->
    	<pathelement location="thirdparty/zookeeper-3.3.2/zookeeper-3.3.2.jar"/>
    	<pathelement location="thirdparty/zookeeper-3.3.2/lib/jline-0.9.94.jar"/>
    	<pathelement location="thirdparty/zookeeper-3.3.2/lib/log4j-1.2.15.jar"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="cleanall" name="distclean">
        <delete file="rain.jar"/>
        <delete>
            <fileset dir="workloads" includes="**/*.jar"/>
        </delete>
    </target>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" excludes="radlab/rain/workload/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target depends="build" name="Benchmark">
        <java classname="radlab.rain.Benchmark" failonerror="true" fork="yes">
            <classpath refid="rain.classpath"/>
        	<jvmarg value="-Xmx1g" />
        	<jvmarg value="-Xms256m" />
        	<jvmarg value="-XX:+DisableExplicitGC"/>
        	<arg file="rain.single_user.config.json"/>
        </java>
    </target>
    <target depends="build" name="Benchmark-null">
        <java classname="radlab.rain.Benchmark" failonerror="true" fork="yes">
            <classpath refid="rain.classpath"/>
                <jvmarg value="-Xmx1g" />
                <jvmarg value="-Xms256m" />
                <jvmarg value="-XX:+DisableExplicitGC"/>
                <arg file="config/rain.config.null.json"/>
        </java>
    </target>
	<target depends="build" name="Benchmark-memprof">
        <java classname="radlab.rain.Benchmark" failonerror="true" fork="yes">
	        <classpath refid="rain.classpath"/>
	        <jvmarg value="-Xmx1g" />
	        <jvmarg value="-Xms256m" />
	        <jvmarg value="-XX:+DisableExplicitGC"/>
	        <jvmarg value="-agentlib:hprof=heap=sites,file=mem.log,depth=6" />
	        <arg file="config/rain.config.null.json"/>
        </java>
    </target>  
    <target depends="build" name="package">
        <jar destfile="rain.jar" filesetmanifest="mergewithoutmain">
            <manifest>
                <attribute name="Main-Class" value="radlab.rain.Benchmark"/>
            </manifest>
            <fileset dir="bin" excludes="radlab/rain/workload/** radlab/rain/test/**"/>
            <zipfileset excludes="META-INF/*.SF" src="thirdparty/httpcomponents-client-4.3.1/lib/commons-codec-1.6.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="thirdparty/httpcomponents-client-4.3.1/lib/commons-logging-1.1.3.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="thirdparty/httpcomponents-client-4.3.1/lib/fluent-hc-4.3.1.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="thirdparty/httpcomponents-client-4.3.1/lib/httpclient-4.3.1.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="thirdparty/httpcomponents-client-4.3.1/lib/httpclient-cache-4.3.1.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="thirdparty/httpcomponents-client-4.3.1/lib/httpcore-4.3.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="thirdparty/httpcomponents-client-4.3.1/lib/httpmime-4.3.1.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="thirdparty/json-20090211.jar"/>
        	<zipfileset excludes="META-INF/*.SF" src="thirdparty/colt-1.2.0/colt.jar"/>
        	<!-- Zookeeper stuff -->
        	<zipfileset excludes="META-INF/*.SF" src="thirdparty/zookeeper-3.3.2/zookeeper-3.3.2.jar"/>
        	<zipfileset excludes="META-INF/*.SF" src="thirdparty/zookeeper-3.3.2/lib/jline-0.9.94.jar"/>
        	<zipfileset excludes="META-INF/*.SF" src="thirdparty/zookeeper-3.3.2/lib/log4j-1.2.15.jar"/>
        </jar>
    </target>
	<!-- Cassandra workload -->
    <target depends="build" name="build-cassandra">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/cassandra/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
	    	<classpath>
	    	    <fileset dir="thirdparty/hector-core-1.0-1/" includes="*.jar"/>
	    	</classpath>
        </javac>
	</target>
	<target depends="build-cassandra" name="Benchmark-cassandra">
		<java classname="radlab.rain.Benchmark" failonerror="true" fork="yes">
            <classpath refid="rain.classpath"/>
	    	<classpath>
	    	    <fileset dir="thirdparty/hector-core-1.0-1/" includes="*.jar"/>
	    	</classpath>
	    	<jvmarg value="-Xmx1g" />
	    	<jvmarg value="-Xms256m" />
	    	<jvmarg value="-XX:+DisableExplicitGC"/>
	        <arg file="config/rain.config.cassandra.json"/>
	    </java>
	</target>
    <target depends="build-cassandra" name="package-cassandra">
        <mkdir dir="workloads"/>
        <jar destfile="workloads/cassandra.jar" filesetmanifest="mergewithoutmain">
            <fileset dir="bin" includes="radlab/rain/workload/cassandra/**"/>
        	<!-- Bake the configuration files into the jar -->
        	<fileset dir="." includes="config/*cassandra*.json"/>
            <!-- Bake class dependencies into the jar -->
    	    <zipfileset dir="thirdparty/hector-core-1.0-1/" includes="*.jar" excludes="META-INF/*.SF"/>
        </jar>
    </target>
	<!-- CloudstoneNull workload -->
    <target depends="build" name="build-cloudstoneNull">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/cloudstoneNull/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
        </javac>
    </target>
    <target depends="build-cloudstoneNull" name="package-cloudstoneNull">
        <mkdir dir="workloads"/>
        <jar destfile="workloads/cloudstoneNull.jar" filesetmanifest="mergewithoutmain">
            <fileset dir="bin" includes="radlab/rain/workload/cloudstoneNull/**"/>
        	<!-- Bake the configuration files into the jar -->
        	<fileset dir="." includes="config/*cloudstoneNull*.json"/>
        </jar>
    </target>
	<!-- Comrades workload -->
    <target depends="build" name="build-comrades">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/comrades/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
        </javac>
    </target>
	<target depends="build-comrades" name="package-comrades">
        <mkdir dir="workloads"/>
        <jar destfile="workloads/comrades.jar" filesetmanifest="mergewithoutmain">
            <fileset dir="bin" includes="radlab/rain/workload/comrades/**"/>
        	<!-- Bake the configuration files into the jar -->
        	<fileset dir="." includes="config/*comrades*.json"/>
            <!-- Bake the resource files into the jar -->
        	<fileset dir="." includes="resources/comrades_names.txt"/>
        </jar>
    </target>
	<!-- Daytrader workload -->
    <target depends="build" name="build-daytrader">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/daytrader/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
        </javac>
    </target>
	<target depends="build-daytrader" name="package-daytrader">
		<mkdir dir="workloads"/>
	    <jar destfile="workloads/daytrader.jar" filesetmanifest="mergewithoutmain">
	    	<fileset dir="bin" includes="radlab/rain/workload/daytrader/**"/>
        	<!-- Bake the configuration files into the jar -->
        	<fileset dir="." includes="config/*daytrader*.json"/>
	    </jar>
	</target>
	<!-- Gradit workload -->
    <target depends="build" name="build-gradit">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/gradit/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
        </javac>
    </target>
	<target depends="build-gradit" name="Benchmark-gradit">
		<java classname="radlab.rain.Benchmark" failonerror="true" fork="yes">
	    	<classpath refid="rain.classpath"/>
	    	<jvmarg value="-Xmx1g" />
	    	<jvmarg value="-Xms256m" />
	    	<jvmarg value="-XX:+DisableExplicitGC"/>
	        <arg file="config/rain.config.gradit.json"/>
	    </java>
	</target>
	<target depends="build-gradit" name="package-gradit">
        <mkdir dir="workloads"/>
        <jar destfile="workloads/gradit.jar" filesetmanifest="mergewithoutmain">
            <fileset dir="bin" includes="radlab/rain/workload/gradit/**"/>
        	<!-- Bake the configuration files into the jar -->
        	<fileset dir="." includes="config/*gradit*.json"/>
        </jar>
    </target>
	<!-- HBase workload -->
    <target depends="build" name="build-hbase">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/hbase/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
	    	<classpath>
	    	    <pathelement location="thirdparty/hbase-0.92.1/hbase-0.92.1.jar"/>
	    	    <fileset dir="thirdparty/hbase-0.92.1/lib/" includes="*.jar"/>
	    	</classpath>
        </javac>
    </target>
	<target depends="build-hbase" name="Benchmark-hbase">
		<java classname="radlab.rain.Benchmark" failonerror="true" fork="yes">
	    	<classpath refid="rain.classpath"/>
	    	<classpath>
	    	    <pathelement location="thirdparty/hbase-0.92.1/hbase-0.92.1.jar"/>
	    	    <fileset dir="thirdparty/hbase-0.92.1/lib/" includes="*.jar"/>
	    	</classpath>
	    	<jvmarg value="-Xmx1g" />
	    	<jvmarg value="-Xms256m" />
	    	<jvmarg value="-XX:+DisableExplicitGC"/>
	        <arg file="config/rain.config.hbase.json"/>
	    </java>
	</target>
    <target depends="build-hbase" name="package-hbase">
        <mkdir dir="workloads"/>
        <jar destfile="workloads/hbase.jar" filesetmanifest="mergewithoutmain">
            <fileset dir="bin" includes="radlab/rain/workload/hbase/**"/>
        	<!-- Bake the configuration files into the jar -->
        	<fileset dir="." includes="config/*hbase*.json"/>
            <!-- Bake class dependencies into the jar -->
    	    <zipfileset excludes="META-INF/*.SF" src="thirdparty/hbase-0.92.1/hbase-0.92.1.jar"/>
    	    <zipfileset dir="thirdparty/hbase-0.92.1/lib/" includes="*.jar" excludes="META-INF/*.SF"/>
        </jar>
    </target>
	<!-- HTTPTest workload -->
    <target depends="build" name="build-httptest">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/httptest/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
        </javac>
    </target>
	<target depends="build-httptest" name="Benchmark-httptest">
		<java classname="radlab.rain.Benchmark" failonerror="true" fork="yes">
	    	<classpath refid="rain.classpath"/>
	    	<jvmarg value="-Xmx1g" />
	    	<jvmarg value="-Xms256m" />
	    	<jvmarg value="-XX:+DisableExplicitGC"/>
	        <arg file="config/rain.config.ac.json"/>
	    </java>
	</target>
	<target depends="build-httptest" name="package-httptest">
		<mkdir dir="workloads"/>
	    <jar destfile="workloads/httptest.jar" filesetmanifest="mergewithoutmain">
	    	<fileset dir="bin" includes="radlab/rain/workload/httptest/**"/>
        	<!-- Bake the configuration files into the jar -->
        	<fileset dir="." includes="config/*httptest*.json"/>
	    </jar>
	</target>
	<!-- MapReduce workload -->
    <target depends="build" name="build-mapreduce">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/mapreduce/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
	    	<classpath>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/hadoop-core.1.2.1.jar"/>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/hadoop-examples.1.2.1.jar"/>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/hadoop-tools.1.2.1.jar"/>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/lib/commons-cli-1.2.jar"/>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/lib/commons-configuration-1.6.jar"/>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/lib/commons-httpclient-3.0.1.jar"/>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/lib/commons-lang-2.4.jar"/>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/lib/jackson-core-asl-1.8.8.jar"/>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/lib/jackson-mapper-asl-1.8.8.jar"/>
	    	</classpath>
        </javac>
    </target>
	<target depends="build-mapreduce" name="Benchmark-mapreduce">
		<java classname="radlab.rain.Benchmark" failonerror="true" fork="yes">
	    	<classpath refid="rain.classpath"/>
	    	<classpath>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/hadoop-core.1.2.1.jar"/>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/hadoop-examples.1.2.1.jar"/>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/hadoop-tools.1.2.1.jar"/>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/lib/commons-cli-1.2.jar"/>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/lib/commons-configuration-1.6.jar"/>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/lib/commons-httpclient-3.0.1.jar"/>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/lib/commons-lang-2.4.jar"/>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/lib/jackson-core-asl-1.8.8.jar"/>
	    	    <pathelement location="thirdparty/hadoop-1.2.1/lib/jackson-mapper-asl-1.8.8.jar"/>
	    	</classpath>
	    	<jvmarg value="-Xmx1g" />
	    	<jvmarg value="-Xms256m" />
	    	<jvmarg value="-XX:+DisableExplicitGC"/>
	        <arg file="config/rain.config.mapreduce.json"/>
	    </java>
	</target>
	<target depends="build-mapreduce" name="package-mapreduce">
        <mkdir dir="workloads"/>
        <jar destfile="workloads/mapreduce.jar" filesetmanifest="mergewithoutmain">
            <fileset dir="bin" includes="radlab/rain/workload/mapreduce/**"/>
        	<!-- Bake the configuration files into the jar -->
        	<fileset dir="." includes="config/*mapreduce*.json"/>
            <!-- Bake class dependencies into the jar -->
        	<zipfileset excludes="META-INF/*.SF" src="thirdparty/hadoop-1.2.1/hadoop-core-1.2.1.jar"/>
        	<zipfileset excludes="META-INF/*.SF" src="thirdparty/hadoop-1.2.1/hadoop-examples-1.2.1.jar"/>
        	<zipfileset excludes="META-INF/*.SF" src="thirdparty/hadoop-1.2.1/hadoop-tools-1.2.1.jar"/>
        	<zipfileset excludes="META-INF/*.SF" src="thirdparty/hadoop-1.2.1/lib/commons-cli-1.2.jar"/>
        	<zipfileset excludes="META-INF/*.SF" src="thirdparty/hadoop-1.2.1/lib/commons-configuration-1.6.jar"/>
        	<zipfileset excludes="META-INF/*.SF" src="thirdparty/hadoop-1.2.1/lib/commons-httpclient-3.0.1.jar"/>
        	<zipfileset excludes="META-INF/*.SF" src="thirdparty/hadoop-1.2.1/lib/commons-lang-2.4.jar"/>
        	<zipfileset excludes="META-INF/*.SF" src="thirdparty/hadoop-1.2.1/lib/jackson-core-asl-1.8.8.jar"/>
        	<zipfileset excludes="META-INF/*.SF" src="thirdparty/hadoop-1.2.1/lib/jackson-mapper-asl-1.8.8.jar"/>
            <!-- Bake the resource files into the jar -->
            <fileset dir="." includes="resources/replay_hr_0.scrub"/>
            <fileset dir="." includes="resources/replay_hr_0.scrub.test"/>
        </jar>
    </target>
	<!-- MongoDB workload -->
    <target depends="build" name="build-mongodb">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/mongodb/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
	    	<classpath>
	    	    <pathelement location="thirdparty/mongo-2.5.3/mongo-2.5.3.jar"/>
	    	</classpath>
        </javac>
    </target>
	<target depends="build-mongodb" name="Benchmark-mongodb">
		<java classname="radlab.rain.Benchmark" failonerror="true" fork="yes">
	    	<classpath refid="rain.classpath"/>
	    	<classpath>
	    	    <pathelement location="thirdparty/mongo-2.5.3/mongo-2.5.3.jar"/>
	    	</classpath>
	    	<jvmarg value="-Xmx1g" />
	    	<jvmarg value="-Xms256m" />
	    	<jvmarg value="-XX:+DisableExplicitGC"/>
	        <arg file="config/rain.config.mongo.json"/>
	    </java>
	</target>
	<target depends="build-mongodb" name="Benchmark-mongodb-diurnal">
		<java classname="radlab.rain.Benchmark" failonerror="true" fork="yes">
	    	<classpath refid="rain.classpath"/>
	    	<classpath>
	    	    <pathelement location="thirdparty/mongo-2.5.3/mongo-2.5.3.jar"/>
	    	</classpath>
	    	<jvmarg value="-Xmx1g" />
	    	<jvmarg value="-Xms256m" />
	    	<jvmarg value="-XX:+DisableExplicitGC"/>
	        <arg file="config/rain.config.mongo.diurnal.json"/>
	    </java>
	</target>
	<target depends="build-mongodb" name="package-mongodb">
        <mkdir dir="workloads"/>
        <jar destfile="workloads/mongodb.jar" filesetmanifest="mergewithoutmain">
            <fileset dir="bin" includes="radlab/rain/workload/mongodb/**"/>
        	<!-- Bake the configuration files into the jar -->
        	<fileset dir="." includes="config/*mongo*.json"/>
            <!-- Bake class dependencies into the jar -->
            <zipfileset excludes="META-INF/*.SF" src="thirdparty/mongo-2.5.3/mongo-2.5.3.jar"/>
        </jar>
    </target>
	<!-- Olio workload -->
    <target depends="build" name="build-olio">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/olio/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
        </javac>
    </target>
	<target depends="build-olio" name="Benchmark-olio">
        <java classname="radlab.rain.Benchmark" failonerror="true" fork="yes">
            <classpath refid="rain.classpath"/>
            <jvmarg value="-Xmx1g" />
            <jvmarg value="-Xms256m" />
            <jvmarg value="-XX:+DisableExplicitGC"/>
            <arg file="config/rain.config.olio.json"/>
        </java>
    </target>
	<target depends="build-olio" name="package-olio">
        <mkdir dir="workloads"/>
        <jar destfile="workloads/olio.jar" filesetmanifest="mergewithoutmain">
            <fileset dir="bin" includes="radlab/rain/workload/olio/**"/>
            <!-- Bake the configuration files into the jar -->
            <fileset dir="." includes="config/*olio*.json"/>
            <!-- Bake the resource files into the jar -->
            <fileset dir="." includes="resources/event.pdf"/>
            <fileset dir="." includes="resources/event.jpg"/>
            <fileset dir="." includes="resources/event_thumb.jpg"/>
            <fileset dir="." includes="resources/person.jpg"/>
            <fileset dir="." includes="resources/person_thumb.jpg"/>
        </jar>
    </target>
	<!-- Raddit workload -->
    <target depends="build" name="build-raddit">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/raddit/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
        </javac>
    </target>
    <target depends="build-raddit" name="package-raddit">
        <mkdir dir="workloads"/>
        <jar destfile="workloads/raddit.jar" filesetmanifest="mergewithoutmain">
            <fileset dir="bin" includes="radlab/rain/workload/raddit/**"/>
            <!-- Bake the configuration files into the jar -->
            <fileset dir="." includes="config/*raddit*.json"/>
        </jar>
    </target>
	<!-- Redis workload -->
    <target depends="build" name="build-redis">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/redis/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
	    	<classpath>
	    	    <pathelement location="thirdparty/jedis/target/jedis-2.7.3.jar"/>
	    	    <pathelement location="thirdparty/commons-pool2-2.2/commons-pool2-2.2.jar"/>
	    	</classpath>
        </javac>
    </target>
	<target depends="build-redis" name="Benchmark-redis">
		<java classname="radlab.rain.Benchmark" failonerror="true" fork="yes">
	    	<classpath refid="rain.classpath"/>
	    	<classpath>
	    	    <pathelement location="thirdparty/jedis/target/jedis-2.7.3.jar"/>
	    		<pathelement location="thirdparty/commons-pool2-2.2/commons-pool2-2.2.jar"/>
	    	</classpath>
	    	<jvmarg value="-Xmx1g" />
	    	<jvmarg value="-Xms256m" />
	    	<jvmarg value="-XX:+DisableExplicitGC"/>
			<!--<jvmarg value="-agentlib:hprof=heap=sites,file=redis-mem.log,depth=6" />-->
	        <arg file="config/rain.config.redis.json"/>
	    </java>
	</target>
	<target depends="build-redis" name="package-redis">
        <mkdir dir="workloads"/>
        <jar destfile="workloads/redis.jar" filesetmanifest="mergewithoutmain">
            <fileset dir="bin" includes="radlab/rain/workload/redis/**"/>
        	<!-- Bake the configuration files into the jar -->
        	<fileset dir="." includes="config/*redis*.json"/>
            <!-- Bake class dependencies into the jar -->
            <zipfileset excludes="META-INF/*.SF" src="thirdparty/jedis/target/jedis-2.7.3.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="thirdparty/commons-pool2-2.2/commons-pool2-2.2.jar"/>
        </jar>
    </target>
	<!-- Riak workload -->
    <target depends="build" name="build-riak">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/riak/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
	    	<classpath>
	    	    <pathelement location="thirdparty/riak-java-client/target/riak-client-1.0.6-SNAPSHOT-jar-with-dependencies.jar"/>
	    	</classpath>
        </javac>
    </target>
	<target depends="build-riak" name="Benchmark-riak">
		<java classname="radlab.rain.Benchmark" failonerror="true" fork="yes">
	    	<classpath refid="rain.classpath"/>
	    	<classpath>
	    	    <pathelement location="thirdparty/riak-java-client/target/riak-client-1.0.6-SNAPSHOT-jar-with-dependencies.jar"/>
	    	</classpath>
	    	<jvmarg value="-Xmx1g" />
	    	<jvmarg value="-Xms256m" />
	    	<jvmarg value="-XX:+DisableExplicitGC"/>
	        <arg file="config/rain.config.riak.json"/>
	    </java>
	</target>
	<target depends="build-riak" name="package-riak">
        <mkdir dir="workloads"/>
        <jar destfile="workloads/riak.jar" filesetmanifest="mergewithoutmain">
            <fileset dir="bin" includes="radlab/rain/workload/riak/**"/>
        	<!-- Bake the configuration files into the jar -->
        	<fileset dir="." includes="config/*riak*.json"/>
            <!-- Bake class dependencies into the jar -->
            <zipfileset excludes="META-INF/*.SF" src="thirdparty/riak-java-client/target/riak-client-1.0.6-SNAPSHOT-jar-with-dependencies.jar"/>
        </jar>
    </target>
	<!-- RUBBoS workload -->
    <target depends="build" name="build-rubbos">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/rubbos/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
        </javac>
    </target>
	<target depends="build-rubbos" name="package-rubbos">
		<mkdir dir="workloads"/>
	    <jar destfile="workloads/rubbos.jar" filesetmanifest="mergewithoutmain">
	    	<fileset dir="bin" includes="radlab/rain/workload/rubbos/**"/>
        	<!-- Bake the configuration files into the jar -->
        	<fileset dir="." includes="config/*rubbos*.json"/>
            <!-- Bake the resource files into the jar -->
            <fileset dir="." includes="resources/rubbos-dictionary.txt"/>
	    </jar>
	</target>	
	<!-- RUBiS workload -->
    <target depends="build" name="build-rubis">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/rubis/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
        </javac>
    </target>
	<target depends="build-rubis" name="package-rubis">
		<mkdir dir="workloads"/>
	    <jar destfile="workloads/rubis.jar" filesetmanifest="mergewithoutmain">
	    	<fileset dir="bin" includes="radlab/rain/workload/rubis/**"/>
        	<!-- Bake the configuration files into the jar -->
        	<fileset dir="." includes="config/*rubis*.json"/>
	    </jar>
	</target>	
	<!-- S3 workload -->
    <target depends="build" name="build-s3">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/s3/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
	    	<classpath>
	    	    <pathelement location="thirdparty/jets3t-0.8.1/jars/jets3t-0.8.1.jar"/>
	    	    <pathelement location="thirdparty/jets3t-0.8.1/libs/commons-codec/commons-codec-1.3.jar"/>
	    	    <pathelement location="thirdparty/jets3t-0.8.1/libs/commons-httpclient/commons-httpclient-3.1.jar"/>
	    	    <pathelement location="thirdparty/jets3t-0.8.1/libs/commons-logging/commons-logging-1.1.1.jar"/>
	    	</classpath>
        </javac>
    </target>
	<target depends="build-s3" name="Benchmark-s3">
		<java classname="radlab.rain.Benchmark" failonerror="true" fork="yes">
	    	<classpath refid="rain.classpath"/>
	    	<classpath>
	    	    <pathelement location="thirdparty/jets3t-0.8.1/jars/jets3t-0.8.1.jar"/>
	    	    <pathelement location="thirdparty/jets3t-0.8.1/libs/commons-codec/commons-codec-1.3.jar"/>
	    	    <pathelement location="thirdparty/jets3t-0.8.1/libs/commons-httpclient/commons-httpclient-3.1.jar"/>
	    	    <pathelement location="thirdparty/jets3t-0.8.1/libs/commons-logging/commons-logging-1.1.1.jar"/>
	    	</classpath>
	    	<jvmarg value="-Xmx1g" />
	    	<jvmarg value="-Xms256m" />
	    	<jvmarg value="-XX:+DisableExplicitGC"/>
	        <arg file="config/rain.config.s3.json"/>
	    </java>
	</target>
	<target depends="build-s3" name="package-s3">
        <mkdir dir="workloads"/>
        <jar destfile="workloads/s3.jar" filesetmanifest="mergewithoutmain">
            <fileset dir="bin" includes="radlab/rain/workload/s3/**"/>
        	<!-- Bake the configuration files into the jar -->
        	<fileset dir="." includes="config/*s3*.json"/>
            <!-- Bake class dependencies into the jar -->
    	    <zipfileset excludes="META-INF/*.SF" src="thirdparty/jets3t-0.8.1/jars/jets3t-0.8.1.jar"/>
    	    <zipfileset excludes="META-INF/*.SF" src="thirdparty/jets3t-0.8.1/libs/commons-codec/commons-codec-1.3.jar"/>
    	    <zipfileset excludes="META-INF/*.SF" src="thirdparty/jets3t-0.8.1/libs/commons-httpclient/commons-httpclient-3.1.jar"/>
    	    <zipfileset excludes="META-INF/*.SF" src="thirdparty/jets3t-0.8.1/libs/commons-logging/commons-logging-1.1.1.jar"/>
        </jar>
    </target>
	<!-- Sample workload -->
    <target depends="build" name="build-sample">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/sample/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
        </javac>
    </target>
    <target depends="build-sample" name="package-sample">
        <mkdir dir="workloads"/>
        <jar destfile="workloads/sample.jar" filesetmanifest="mergewithoutmain">
            <fileset dir="bin" includes="radlab/rain/workload/sample/**"/>
        	<!-- Bake the configuration files into the jar -->
        	<fileset dir="." includes="config/*sample*.json"/>
        </jar>
    </target>
	<!-- Scadr workload -->
    <target depends="build" name="build-scadr">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/scadr/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
        </javac>
    </target>
	<target depends="build-scadr" name="Benchmark-scadr">
		<java classname="radlab.rain.Benchmark" failonerror="true" fork="yes">
	    	<classpath refid="rain.classpath"/>
	    	<jvmarg value="-Xmx1g" />
	    	<jvmarg value="-Xms256m" />
	    	<jvmarg value="-XX:+DisableExplicitGC"/>
	        <arg file="config/rain.config.scadr.json"/>
	    </java>
	</target>
	<target depends="build-scadr" name="Benchmark-scadr-wiki">
		<java classname="radlab.rain.Benchmark" failonerror="true" fork="yes">
	    	<classpath refid="rain.classpath"/>
	    	<jvmarg value="-Xmx1g" />
	    	<jvmarg value="-Xms256m" />
	    	<jvmarg value="-XX:+DisableExplicitGC"/>
	        <arg file="config/rain.config.scadr.wiki.json"/>
	    </java>
	</target>
	<target depends="build-scadr" name="package-scadr">
        <mkdir dir="workloads"/>
        <jar destfile="workloads/scadr.jar" filesetmanifest="mergewithoutmain">
            <fileset dir="bin" includes="radlab/rain/workload/scadr/**"/>
        	<!-- Bake the configuration files into the jar -->
        	<fileset dir="." includes="config/*scadr*.json"/>
        </jar>
    </target>
	<!-- Scads workload -->
    <target depends="build" name="build-scads">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includes="radlab/rain/workload/scads/**">
            <src path="src"/>
            <classpath refid="rain.classpath"/>
        </javac>
    </target>
    <target depends="build-scads" name="package-scads">
        <mkdir dir="workloads"/>
        <jar destfile="workloads/scads.jar" filesetmanifest="mergewithoutmain">
            <fileset dir="bin" includes="radlab/rain/workload/scads/**"/>
        	<!-- Bake the configuration files into the jar -->
        	<fileset dir="." includes="config/*scads*.json"/>
        </jar>
    </target>
	<!-- Tests -->
    <target name="OlioOperationsTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="radlab.rain.test.OlioOperationsTest" todir="${junit.output.dir}"/>
            <classpath refid="rain.classpath"/>
        </junit>
    </target>
    <target name="OlioOperationsTest.testEventDetailOperation">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="radlab.rain.test.OlioOperationsTest" todir="${junit.output.dir}"/>
            <classpath refid="rain.classpath"/>
        </junit>
    </target>
    <target name="HttpTransportTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="radlab.rain.test.HttpTransportTest" todir="${junit.output.dir}"/>
            <classpath refid="rain.classpath"/>
        </junit>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
</project>
